plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'

    // Firebase Crashlytics Gradle
    id 'com.google.firebase.crashlytics'

    // Google GMS Google Services Gradle Plugin
    id 'com.google.gms.google-services' apply false
}


// keystore.properties の読み取り
def keystoreProperties = new Properties()
try {
    keystoreProperties.load(new FileInputStream(rootProject.file('keystore.properties')))
} catch (e) {
}


android {
    namespace 'jp.co.yumemi.android.code_check'
    compileSdk androidApi.target

    buildFeatures {
        viewBinding true
    }
    defaultConfig {
        applicationId "jp.co.yumemi.android.codecheck"
        minSdk androidApi.min
        targetSdk androidApi.target
        versionCode appVersionCode
        versionName appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        def file = rootProject.file('release.jks')
        if (file.exists()) {
            release {
                storeFile file
                storePassword System.getenv('KEYSTORE_PASSWORD')
                        ?: keystoreProperties.getProperty('KEYSTORE_PASSWORD', '')
                keyAlias System.getenv('KEY_ALIAS')
                        ?: keystoreProperties.getProperty('KEY_ALIAS', '')
                keyPassword System.getenv('KEY_PASSWORD')
                        ?: keystoreProperties.getProperty('KEY_PASSWORD', '')
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix = '.debug'
            versionNameSuffix = '.debug'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {

    // Local Modules
    implementation project(":app_core")
    implementation project(":github_web_api")

    // AndroidX
    implementation "${libraries.androidx.appcompat}"
    implementation "${libraries.androidx.constraintlayout}"
    implementation "${libraries.androidx.core}"
    androidTestImplementation "${libraries.androidx.espresso.contrib}"
    androidTestImplementation "${libraries.androidx.espresso.core}"
    androidTestImplementation "${libraries.androidx.junit}"
    implementation "${libraries.androidx.lifecycle.runtime}"
    implementation "${libraries.androidx.lifecycle.viewmodel}"
    implementation "${libraries.androidx.navigation.fragment}"
    implementation "${libraries.androidx.navigation.ui}"
    implementation "${libraries.androidx.paging}"
    implementation "${libraries.androidx.recyclerview}"
    androidTestImplementation "${libraries.androidx.uiautomator}"

    // Auto Service
    kaptDebug "${libraries.autoservice}"

    // Coil
    implementation "${libraries.coil}"

    // Desugar
    coreLibraryDesugaring "${libraries.desugar}"

    // Firebase
    releaseImplementation platform("${libraries.firebase.bom}")
    releaseImplementation("${libraries.firebase.crashlytics}")

    // Hyperion
    debugImplementation "${libraries.hyperion.attr}"
    debugImplementation "${libraries.hyperion.core}"
    debugImplementation "${libraries.hyperion.measurement}"
    debugImplementation "${libraries.hyperion.plugin}"
    debugImplementation "${libraries.hyperion.timber}"

    // Kotlin Coroutines
    implementation "${libraries.coroutines.bom}"
    implementation "${libraries.coroutines.android}"

    // LeakCanary
    debugImplementation "${libraries.leakCanary}"

    // Material Design
    implementation "${libraries.material}"

    // OkHttp
    implementation platform("${libraries.okhttp.bom}")
    debugImplementation "${libraries.okhttp.logging}"
    implementation "${libraries.okhttp.okhttp}"

    // Timber
    implementation "${libraries.timber}"
}


// アプリバージョン名の表示
tasks.register('showVersionName') {
    def file = rootProject.file('./app/build/outputs/apk/release/output-metadata.json')
    def versionName = 'unknown'
    if (file.exists()) {
        def text = file.text.toString()
        def matches = (text =~ /"versionName": "(.+)",/)
        versionName = matches[0][1]
    }
    println(versionName)
}


// app/google-services.json がある場合のみセットアップ
if (rootProject.file('app/google-services.json').exists()) {
    apply plugin: 'com.google.gms.google-services'
}
